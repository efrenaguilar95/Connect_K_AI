#include "gametree.h"
#include <iostream>



void print_board(int** board, int colCount, int rowCount)
{
	int row = rowCount-1;
	while(row > 0)
	{
		for(int col = 0; col<colCount; col++)
		{
			std::cout<<board[row][col];
		}
		std::cout<<std::endl;
		row -= 1;
	}
}


int main()
{
	//Original GameTree testing code
	/*
	//Random comment
	GameTree<int> gTree(10);
	//gTree.print_value();
	GameTree<int> gTree2(8);
	//GameTree<int>* g2 = &gTree2;
	gTree.addChild(gTree2);
	//gTree.first_child->print_value();
	GameTree<int> gTree3(7);
	GameTree<int> gTree4(14);
	GameTree<int> gTree5(25);
	gTree.first_child->addSibling(gTree3);
	gTree.first_child->addChild(gTree4);
	gTree.first_child->next_sibling->addChild(gTree5);
	//std::cout << gTree.first_child->next_sibling->value<< std::endl;
	GameTree<int> gTree6(11);
	GameTree<int> gTree7(18);
	gTree.first_child->addSibling(gTree6);
	gTree.first_child->addChild(gTree7);
	gTree.dfs();
	std::cout<< "end" << std::endl;

	GameTree<int>* k = &gTree;
	*/

	int colCount = 9;
	int rowCount = 7;


	int** board = NULL;
	board = new int*[colCount];
	for(int i = 0; i<colCount; i++)
	{
		board[i] = new int[rowCount];
	}

	for(int col = 0; col<colCount; col++)
	{
		for(int row = 0; row<rowCount; row++)
		{
			std::cin>>board[row][col];
		}
	}
	print_board(board, colCount, rowCount);
}



